'use client';

import { useState } from 'react';
import { FiBookOpen, FiCalendar, FiClock, FiList, FiTarget, FiBook, FiDownload, FiLink, FiExternalLink, FiMap } from 'react-icons/fi';
import { toast } from 'sonner';

export default function RoadmapViewer({ roadmap, topic, duration }) {
  const [activeTab, setActiveTab] = useState('overview');

  // Function to download the roadmap as a text file
  const downloadRoadmap = () => {
    if (!roadmap) return;
    
    try {
      // Convert the roadmap to a readable text format
      const roadmapText = formatRoadmapForDownload(roadmap, topic, duration);
      
      // Create a blob with the formatted text
      const blob = new Blob([roadmapText], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      // Create a link to download the file
      const link = document.createElement('a');
      link.href = url;
      link.download = `${topic} - Learning Roadmap.txt`;
      document.body.appendChild(link);
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast.success('Roadmap downloaded successfully!');
    } catch (error) {
      console.error('Error downloading roadmap:', error);
      toast.error('Failed to download roadmap.');
    }
  };

  const formatRoadmapForDownload = (plan, topicName, durationWeeks) => {
    // Format the roadmap as readable text
    let text = `LEARNING ROADMAP FOR: ${topicName}\n`;
    text += `DURATION: ${durationWeeks} week${durationWeeks > 1 ? 's' : ''}\n`;
    text += `===============================\n\n`;
    
    // Overview
    text += `OVERVIEW:\n${plan.overview || 'No overview available.'}\n\n`;
    
    // Topics
    text += `KEY TOPICS:\n`;
    if (plan.topics && plan.topics.length > 0) {
      plan.topics.forEach((topic, index) => {
        text += `${index + 1}. ${topic.title} (Priority: ${topic.priority})\n`;
        text += `   ${topic.description}\n\n`;
      });
    } else {
      text += `No topics available.\n\n`;
    }
    
    // Schedule
    text += `LEARNING SCHEDULE:\n`;
    if (plan.schedule && plan.schedule.weeks && plan.schedule.weeks.length > 0) {
      plan.schedule.weeks.forEach((week, weekIndex) => {
        text += `Week ${weekIndex + 1}:\n`;
        
        if (week.days && week.days.length > 0) {
          week.days.forEach(day => {
            text += `  ${day.day} (${day.duration}):\n`;
            day.activities.forEach(activity => {
              text += `    - ${activity}\n`;
            });
          });
        } else {
          text += `  No daily schedule available.\n`;
        }
        
        text += `\n`;
      });
    } else {
      text += `No schedule available.\n\n`;
    }
    
    // Learning techniques
    text += `RECOMMENDED LEARNING TECHNIQUES:\n`;
    if (plan.techniques && plan.techniques.length > 0) {
      plan.techniques.forEach((technique, index) => {
        text += `${index + 1}. ${technique.name}\n`;
        text += `   ${technique.description}\n\n`;
      });
    } else {
      text += `No learning techniques available.\n\n`;
    }
    
    // Resources
    text += `RECOMMENDED RESOURCES:\n`;
    if (plan.resources && plan.resources.length > 0) {
      plan.resources.forEach((resource, index) => {
        text += `${index + 1}. ${resource.title}\n`;
        text += `   ${resource.description}\n`;
        if (resource.url) {
          text += `   URL: ${resource.url}\n`;
        }
        text += `\n`;
      });
    } else {
      text += `No resources available.\n\n`;
    }
    
    text += `===============================\n`;
    text += `Generated by StudyGenius AI on ${new Date().toLocaleDateString()}`;
    
    return text;
  };

  // If there's no roadmap to display
  if (!roadmap) {
    return (
      <div className="flex flex-col items-center justify-center py-16 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <FiMap className="w-16 h-16 text-gray-400 dark:text-gray-500 mb-4" />
        <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-2">No roadmap available</h3>
        <p className="text-gray-500 dark:text-gray-400 text-center max-w-md mb-6">
          Enter a topic and generate a personalized learning roadmap.
        </p>
      </div>
    );
  }

  // Display the roadmap with tabs for different sections
  return (
    <div className="space-y-6 p-6">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <h2 className="text-xl font-bold text-gray-900 dark:text-white">
          Learning Roadmap: {topic}
        </h2>
        <div className="flex gap-2">
          <button
            onClick={downloadRoadmap}
            className="flex items-center gap-2 px-3 py-1.5 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors text-sm"
          >
            <FiDownload className="h-4 w-4" />
            <span>Download</span>
          </button>
        </div>
      </div>

      {/* Overview section */}
      <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
        <p className="text-gray-600 dark:text-gray-300">{roadmap.overview}</p>
      </div>

      {/* Navigation tabs */}
      <div className="flex flex-wrap border-b border-gray-200 dark:border-gray-700">
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'overview'
              ? 'border-primary-500 text-primary-600 dark:text-primary-400'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('overview')}
        >
          <FiBookOpen className="inline-block mr-2" />
          Overview
        </button>
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'topics'
              ? 'border-primary-500 text-primary-600 dark:text-primary-400'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('topics')}
        >
          <FiList className="inline-block mr-2" />
          Topics
        </button>
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'schedule'
              ? 'border-primary-500 text-primary-600 dark:text-primary-400'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('schedule')}
        >
          <FiCalendar className="inline-block mr-2" />
          Schedule
        </button>
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'techniques'
              ? 'border-primary-500 text-primary-600 dark:text-primary-400'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('techniques')}
        >
          <FiTarget className="inline-block mr-2" />
          Techniques
        </button>
        <button
          className={`px-4 py-2 border-b-2 ${
            activeTab === 'resources'
              ? 'border-primary-500 text-primary-600 dark:text-primary-400'
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
          }`}
          onClick={() => setActiveTab('resources')}
        >
          <FiBook className="inline-block mr-2" />
          Resources
        </button>
      </div>

      {/* Tab content */}
      <div className="py-4">
        {/* Topics tab */}
        {activeTab === 'topics' && (
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">Key Topics</h3>
            {roadmap.topics && roadmap.topics.length > 0 ? (
              <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
                {roadmap.topics.map((topic, index) => (
                  <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="font-medium text-gray-900 dark:text-white">{topic.title}</h4>
                      <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                        topic.priority === 'High' 
                          ? 'bg-danger-100 text-danger-800 dark:bg-danger-900 dark:text-danger-200' 
                          : topic.priority === 'Medium'
                            ? 'bg-warning-100 text-warning-800 dark:bg-warning-900 dark:text-warning-200'
                            : 'bg-success-100 text-success-800 dark:bg-success-900 dark:text-success-200'
                      }`}>
                        {topic.priority}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-300">{topic.description}</p>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 dark:text-gray-400">No topics available.</p>
            )}
          </div>
        )}

        {/* Schedule tab */}
        {activeTab === 'schedule' && (
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">Learning Schedule</h3>
            {roadmap.schedule && roadmap.schedule.weeks && roadmap.schedule.weeks.length > 0 ? (
              <div className="space-y-8">
                {roadmap.schedule.weeks.map((week, weekIndex) => (
                  <div key={weekIndex} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                    <h4 className="font-medium text-gray-900 dark:text-white mb-4">Week {weekIndex + 1}</h4>
                    
                    {week.days && week.days.length > 0 ? (
                      <div className="space-y-4">
                        {week.days.map((day, dayIndex) => (
                          <div key={dayIndex} className="bg-gray-50 dark:bg-gray-800 rounded p-3">
                            <div className="flex justify-between items-center mb-2">
                              <h5 className="font-medium text-gray-900 dark:text-white">{day.day}</h5>
                              <span className="text-xs text-gray-500 dark:text-gray-400 flex items-center">
                                <FiClock className="mr-1" /> {day.duration}
                              </span>
                            </div>
                            <ul className="space-y-1">
                              {day.activities.map((activity, actIndex) => (
                                <li key={actIndex} className="text-sm text-gray-600 dark:text-gray-300 flex items-start">
                                  <span className="text-primary-500 mr-2">•</span>
                                  {activity}
                                </li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-gray-500 dark:text-gray-400">No daily schedule available for this week.</p>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 dark:text-gray-400">No schedule available.</p>
            )}
          </div>
        )}

        {/* Techniques tab */}
        {activeTab === 'techniques' && (
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">Learning Techniques</h3>
            {roadmap.techniques && roadmap.techniques.length > 0 ? (
              <div className="space-y-4">
                {roadmap.techniques.map((technique, index) => (
                  <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">{technique.name}</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-300">{technique.description}</p>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 dark:text-gray-400">No learning techniques available.</p>
            )}
          </div>
        )}

        {/* Resources tab */}
        {activeTab === 'resources' && (
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white">Recommended Resources</h3>
            {roadmap.resources && roadmap.resources.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {roadmap.resources.map((resource, index) => (
                  <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                    <h4 className="font-medium text-gray-900 dark:text-white mb-2">{resource.title}</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-300 mb-2">{resource.description}</p>
                    {resource.url && (
                      <a 
                        href={resource.url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="flex items-center text-sm text-primary-600 hover:underline dark:text-primary-400"
                      >
                        <FiExternalLink className="mr-1 h-3 w-3" />
                        Visit resource
                      </a>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 dark:text-gray-400">No resources available.</p>
            )}
          </div>
        )}

        {/* Overview tab */}
        {activeTab === 'overview' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Roadmap Information</h3>
                <div className="space-y-2">
                  <div className="flex items-start">
                    <span className="text-gray-500 dark:text-gray-400 w-36">Topic:</span>
                    <span className="text-gray-900 dark:text-white">{topic}</span>
                  </div>
                  <div className="flex items-start">
                    <span className="text-gray-500 dark:text-gray-400 w-36">Duration:</span>
                    <span className="text-gray-900 dark:text-white">{duration} week{duration > 1 ? 's' : ''}</span>
                  </div>
                  <div className="flex items-start">
                    <span className="text-gray-500 dark:text-gray-400 w-36">Topics:</span>
                    <span className="text-gray-900 dark:text-white">{roadmap.topics?.length || 0} topics</span>
                  </div>
                  <div className="flex items-start">
                    <span className="text-gray-500 dark:text-gray-400 w-36">Resources:</span>
                    <span className="text-gray-900 dark:text-white">{roadmap.resources?.length || 0} resources</span>
                  </div>
                  <div className="flex items-start">
                    <span className="text-gray-500 dark:text-gray-400 w-36">Generated:</span>
                    <span className="text-gray-900 dark:text-white">{new Date().toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
              
              <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">How to Use This Roadmap</h3>
                <ul className="space-y-2 text-sm text-gray-600 dark:text-gray-300">
                  <li className="flex items-start">
                    <span className="text-primary-500 mr-2">•</span>
                    <span>Follow the weekly schedule to pace your learning</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-primary-500 mr-2">•</span>
                    <span>Focus on high-priority topics first</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-primary-500 mr-2">•</span>
                    <span>Explore the recommended resources for in-depth learning</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-primary-500 mr-2">•</span>
                    <span>Apply the suggested learning techniques to maximize retention</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-primary-500 mr-2">•</span>
                    <span>Download the roadmap for offline reference</span>
                  </li>
                </ul>
              </div>
            </div>
            
            <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Roadmap Summary</h3>
              <p className="text-gray-600 dark:text-gray-300">{roadmap.overview}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}